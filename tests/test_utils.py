"""Test utils.py module."""
import numpy as np
import pytest
from fdtd.exceptions import WrongBounding
from fdtd.utils import BoundingBox, Direction, curl_H


def test_direction():
    """Test definition of the Direction enum."""
    assert Direction.X.value == 0
    assert Direction.Y.value == 1
    assert Direction.Z.value == 2


def test_bounding_box_constructor():
    """Test bounding box constructor."""
    bb = BoundingBox(x_min=0, y_min=0, z_min=0, x_max=2, y_max=3, z_max=4)
    assert bb.x_min == 0 and bb.y_min == 0 and bb.z_min == 0
    assert bb.x_max == 2 and bb.y_max == 3 and bb.z_max == 4


def test_bounding_box_constraints():
    """Test bounding box constraints."""
    with pytest.raises(WrongBounding):
        assert BoundingBox(x_min=2,
                           y_min=0,
                           z_min=0,
                           x_max=1,
                           y_max=3,
                           z_max=4)


def test_curl_H_3d():
    """Test the curl of H for the 3D case."""
    # Nx, Ny, Nz = 3, 3, 3
    # dx, dy, dz = 1, 2, 4
    H = np.array([
        [
            [
                [0.41175628, 0.54497269, 0.87694482],
                [0.00619033, 0.47998455, 0.01648221],
                [0.41879166, 0.03894205, 0.46165536],
            ],
            [
                [0.49759533, 0.6597479, 0.94507888],
                [0.50021524, 0.13800561, 0.49032624],
                [0.46872834, 0.94256836, 0.77427238],
            ],
            [
                [0.70807343, 0.5078941, 0.29885337],
                [0.9046565, 0.03113317, 0.56594783],
                [0.35085117, 0.84449521, 0.84986284],
            ],
        ],
        [
            [
                [0.57761532, 0.19049029, 0.96411697],
                [0.48474871, 0.92047243, 0.55432271],
                [0.92329845, 0.95617636, 0.9002877],
            ],
            [
                [0.21305621, 0.92491459, 0.11388288],
                [0.22881374, 0.0479563, 0.15033834],
                [0.2158323, 0.67310831, 0.31657012],
            ],
            [
                [0.89062128, 0.32665326, 0.91335977],
                [0.1404181, 0.04904151, 0.45150543],
                [0.74542113, 0.92975027, 0.03742597],
            ],
        ],
        [
            [
                [0.81276383, 0.11603565, 0.81372764],
                [0.62753149, 0.01083503, 0.93512356],
                [0.42783217, 0.23133883, 0.18769158],
            ],
            [
                [0.15598718, 0.15576764, 0.76455597],
                [0.48677405, 0.9425119, 0.93940708],
                [0.55603752, 0.57263611, 0.8670275],
            ],
            [
                [0.01654323, 0.18018496, 0.48934036],
                [0.90450219, 0.9974389, 0.26686841],
                [0.32774439, 0.63758452, 0.40733558],
            ],
        ],
    ])
    curl = np.array([
        [
            [
                [+0.00000000, +0.00000000, +0.00000000],
                [+0.01624704, -0.10139149, +0.00000000],
                [+0.11026063, +0.10315033, +0.00000000],
            ],
            [
                [+0.03406703, +0.00000000, -0.04291953],
                [+0.36735759, +0.00065498, -0.24701245],
                [-0.04483218, -0.00787172, -0.02496834],
            ],
            [
                [-0.32311275, +0.00000000, -0.10523905],
                [+0.15700103, +0.04914577, -0.20222063],
                [-0.16554528, -0.13845133, +0.05893859],
            ],
        ],
        [
            [
                [+0.00000000, -0.08717215, -0.35448240],
                [-0.18249553, -0.56105715, +0.44048788],
                [-0.00892598, -0.32899491, +0.91723431],
            ],
            [
                [-0.42511704, +0.83119600, +0.44744624],
                [+0.01724739, +0.34392728, +0.03791818],
                [-0.44814679, +0.45445690, +0.08427303],
            ],
            [
                [+0.39973844, -0.61450640, -0.52002338],
                [+0.21998648, -0.07310839, +0.06210616],
                [-0.35974927, +0.96368763, -0.17953936],
            ],
        ],
        [
            [
                [+0.00000000, +0.15038933, -0.07445464],
                [+0.02630016, -0.42710893, -0.90963740],
                [-0.05512595, +0.66267129, -0.72483753],
            ],
            [
                [-0.02458584, -0.65067309, -0.44075863],
                [-0.19454431, -0.70637202, +0.96493432],
                [+0.43213691, -0.53314151, -0.16457487],
            ],
            [
                [-0.13760780, +0.42401941, -0.07674632],
                [-0.54058282, +0.40662676, +0.73953332],
                [-0.13988236, -0.51409906, -0.17801919],
            ],
        ],
    ])
    assert curl_H(H, 1, 2, 4) == pytest.approx(curl, rel=0.01)


def test_curl_H_2d():
    """Test the curl of H for the 2D case."""
    H = np.array([
        [
            [0.13282649, 0.32839534, 0.24364603],
            [0.76656583, 0.13048723, 0.45246511],
            [0.75371341, 0.00981026, 0.48546986],
        ],
        [
            [0.52108582, 0.53087068, 0.79289589],
            [0.58547571, 0.49905219, 0.64165494],
            [0.65460999, 0.54755809, 0.64365993],
        ],
        [
            [0.21192962, 0.9914645, 0.22000246],
            [0.0981332, 0.22011, 0.53252733],
            [0.99558637, 0.34860218, 0.115797],
        ],
    ])
